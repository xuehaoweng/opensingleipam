[unix_http_server]
file=/var/run/supervisor.sock    ; the path to the socket file
;chmod=0700                 ; socket file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; default is no username (open server)
;password=123               ; default is no password (open server)


[supervisord]
;logfile=/tmp/supervisord.log ; main log file; default $CWD/supervisord.log
logfile=/var/log/supervisor/supervisord.log
logfile_maxbytes=50MB        ; max main logfile bytes b4 rotation; default 50MB
logfile_backups=5            ; # of main logfile backups; 0 means none, default
loglevel=info                ; log level; default info; others: debug,warn,trace
;pidfile=/tmp/supervisord.pid ; supervisord pidfile; default supervisord.pid
pidfile=/var/run/supervisord.pid
nodaemon=false               ; start in foreground if true; default false
minfds=1024                  ; min. avail startup file descriptors; default 1024
minprocs=200                 ; min. avail process descriptors;default 200
;umask=022                   ; process file creation umask; default 022
user=root            ; setuid to this UNIX account at startup; recommend
;identifier=supervisor       ; supervisord identifier, default is 'supervisor'
;directory=/tmp              ; default is not to cd during start
;nocleanup=true              ; don't clean up tempfiles at start; default false
;childlogdir=/tmp            ; 'AUTO' child log dir, default $TEMP
;environment=KEY="value"     ; key value pairs to add to environment
;strip_ansi=false            ; strip ansi escape codes in logs; def. false

; The rpcinterface:supervisor section must remain in the config file for
; RPC (supervisorctl/web interface) to work.  Additional interfaces may be
; added by defining them in separate [rpcinterface:x] sections.

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface


[supervisorctl]
;serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket
serverurl=unix:///var/run/supervisor.sock ;


# [program:uwsgi]
# ;指定运行目录
# directory=/home/ipam_backend
# ;运行目录下执行命令
# ; command=gunicorn netboost.wsgi:application -c gunicorn.conf
# command=uwsgi --ini /home/ipam_backend/uwsgi.ini

# ;启动设置
# numprocs=1          ;进程数
# autostart=true      ;当supervisor启动时,程序将会自动启动
# autorestart=true    ;自动重启

# ;停止信号,默认TERM
# ;中断:INT (类似于Ctrl+C)(kill -INT pid)，退出后会将写文件或日志(推荐)
# ;终止:TERM (kill -TERM pid)
# ;挂起:HUP (kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同
# ;从容停止:QUIT (kill -QUIT pid)
# stopsignal=INT


[program:daphne]
directory=/home/ipam_backend  #项目目录
command=daphne -b 0.0.0.0 -p 18005 --proxy-headers IpamV1.asgi:application #启动命令
autostart=true
autorestart=true
stdout_logfile=/home/ipam_backend/logs/daphne.log  #日志
redirect_stderr=true
;停止信号
stopsignal=INT

[program:celery.worker.flower]
;指定运行目录
directory=/home/ipam_backend
;运行目录下执行命令
command= celery -A IpamV1 flower --broker=redis://:b840fc02d524045429941cc15f59e41cb7be6c52:@micro-redis-cache:36379/8 --port=35055 --basic_auth=admin:admin
;启动设置
numprocs=1          ;进程数
autostart=true      ;当supervisor启动时,程序将会自动启动
autorestart=true    ;自动重启
;停止信号
stopsignal=INT

[program:celery.worker.beat]
;指定运行目录
directory=/home/ipam_backend
;运行目录下执行命令
command=celery -A IpamV1 beat -l info
;启动设置
numprocs=1          ;进程数
autostart=true      ;当supervisor启动时,程序将会自动启动
autorestart=true    ;自动重启
;停止信号
stopsignal=INT
